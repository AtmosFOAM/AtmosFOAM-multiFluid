/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2014-2018 OpenFOAM Foundation
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::RASModels::multiFluidThetaBuoyantKEpsilon

Description
    Additional buoyancy generation/dissipation term applied to the
    k and epsilon equations of the standard k-epsilon model.

    Reference:
    \verbatim
        Henkes, R.A.W.M., Van Der Vlugt, F.F. & Hoogendoorn, C.J. (1991).
        Natural Convection Flow in a Square Cavity Calculated with
        Low-Reynolds-Number Turbulence Models.
        Int. J. Heat Mass Transfer, 34, 1543-1557.
    \endverbatim

    This implementation is based on the density rather than temperature gradient
    extending the applicability to systems in which the density gradient may be
    generated by variation of composition rather than temperature.  Further, the
    1/Prt coefficient is replaced by Cg to provide more general control of
    model.
    
    Generalised to use theta rather than density

    Also added transfer terms between fluids following 
    \verbatim
        @Article{TKP+18,
          author = 	 {Tan, Z. and Kaul, C.M. and Pressel, K.G. and Cohen, Y. and  Schneider, T. and Teixeira, J.},
          title = 	 {An Extended Eddy-Diffusivity Mass-Flux Scheme for Unified
        Representation of Subgrid-Scale Turbulence and Convection},
          journal = 	 {JAMES},
          year = 	 {2018},
          OPTkey = 	 {},
          volume = 	 {10},
          number = 	 {3},
          pages = 	 {770-800},
          OPTdoi = {10.1002/2017MS001162},
          OPTurl = {https://agupubs.onlinelibrary.wiley.com/doi/abs/10.1002/2017MS001162},
          OPTeprint = {https://agupubs.onlinelibrary.wiley.com/doi/pdf/10.1002/2017MS001162},
}
    \endverbatim

    The default model coefficients are
    \verbatim
        multiFluidThetaBuoyantKEpsilonCoeffs
        {
            Cg              1.0;
        }
    \endverbatim

See also
    Foam::RASModels::kEpsilon

SourceFiles
    multiFluidThetaBuoyantKEpsilon.C

\*---------------------------------------------------------------------------*/

#ifndef multiFluidThetaBuoyantKEpsilon_H
#define multiFluidThetaBuoyantKEpsilon_H

#include "kEpsilon.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{
namespace RASModels
{

/*---------------------------------------------------------------------------*\
                           Class multiFluidThetaBuoyantKEpsilon Declaration
\*---------------------------------------------------------------------------*/

template<class BasicTurbulenceModel>
class multiFluidThetaBuoyantKEpsilon
:
    public kEpsilon<BasicTurbulenceModel>
{
    // Private Member Functions

        // Disallow default bitwise copy construct and assignment
        multiFluidThetaBuoyantKEpsilon(const multiFluidThetaBuoyantKEpsilon&);
        void operator=(const multiFluidThetaBuoyantKEpsilon&);


protected:

    // Protected data

        // Model coefficients

            dimensionedScalar Cg_;

    // Protected Member Functions

        tmp<volScalarField> Gcoef() const;

        virtual tmp<fvScalarMatrix> kSource() const;
        virtual tmp<fvScalarMatrix> epsilonSource() const;


public:

    typedef typename BasicTurbulenceModel::alphaField alphaField;
    typedef typename BasicTurbulenceModel::rhoField rhoField;
    typedef typename BasicTurbulenceModel::transportModel transportModel;


    //- Runtime type information
    TypeName("multiFluidThetaBuoyantKEpsilon");


    // Constructors

        //- Construct from components
        multiFluidThetaBuoyantKEpsilon
        (
            const alphaField& alpha,
            const rhoField& rho,
            const volVectorField& U,
            const surfaceScalarField& alphaRhoPhi,
            const surfaceScalarField& phi,
            const transportModel& transport,
            const word& propertiesName = turbulenceModel::propertiesName,
            const word& type = typeName
        );


    //- Destructor
    virtual ~multiFluidThetaBuoyantKEpsilon()
    {}


    // Member Functions

        //- Re-read model coefficients if they have changed
        virtual bool read();
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace RASModels
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
    #include "multiFluidThetaBuoyantKEpsilon.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
